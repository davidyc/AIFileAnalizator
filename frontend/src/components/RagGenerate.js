import React, { useState, useRef } from 'react';
import { API_BASE } from './config';

const RagGenerate = () => {
  const [text, setText] = useState('');
  const [chunkId, setChunkId] = useState('');
  const [messages, setMessages] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [askMode, setAskMode] = useState(true);
  const fileInputRef = useRef(null);

  const handleSend = async () => {
    if (!text.trim()) return;
    setError('');
    setLoading(true);

    if (askMode) {
      const userMessage = { type: 'user', text };
      setMessages((prev) => [...prev, userMessage]);

      try {
        const res = await fetch(`${API_BASE}/rag/generate/ask`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt: text }),
        });

        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ');

        const data = await res.json();
        setMessages((prev) => [
          ...prev,
          { type: 'response', text: data.response },
        ]);
      } catch (err) {
        setError(err.message || '–û—à–∏–±–∫–∞');
      }
    } else {
      try {
        const res = await fetch(`${API_BASE}/rag/generate/chunk`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text, id: chunkId || null }),
        });

        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞–Ω–∫–∞');
        setMessages((prev) => [
          ...prev,
          { type: 'response', text: '‚úÖ –ß–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω' },
        ]);
        setChunkId('');
      } catch (err) {
        setError(err.message || '–û—à–∏–±–∫–∞');
      }
    }

    setText('');
    setLoading(false);
  };

  const handleFileUpload = async () => {
    const file = fileInputRef.current?.files?.[0];
    if (!file) return;

    setMessages((prev) => [
      ...prev,
      { type: 'user', text: `üìé –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª: ${file.name}` },
    ]);

    setLoading(true);
    try {
      const formData = new FormData();
      formData.append('file', file);

      const res = await fetch(`${API_BASE}/rag/generate/upload`, {
        method: 'POST',
        body: formData,
      });

      if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');

      const data = await res.json();
      setMessages((prev) => [
        ...prev,
        { type: 'response', text: data.message || '‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω' },
      ]);
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  return (
    <div className="chat-container">
      <h2>ü§ñ Ollama Generate RAG</h2>
      <div className="chat-window">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`chat-bubble ${
              msg.type === 'user' ? 'user' : 'response'
            }`}
          >
            {msg.text}
          </div>
        ))}
        {loading && (
          <div className="chat-bubble response">
            <em>AI –ø–µ—á–∞—Ç–∞–µ—Ç...</em>
          </div>
        )}
      </div>

      <div className="input-area">
        <textarea
          placeholder={
            askMode ? '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...' : '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...'
          }
          value={text}
          onChange={(e) => setText(e.target.value)}
          disabled={loading}
        />
        <button onClick={handleSend} disabled={loading || !text.trim()}>
          {askMode ? '–°–ø—Ä–æ—Å–∏—Ç—å' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ üìé —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {!askMode && (
          <>
            <button
              onClick={() => fileInputRef.current?.click()}
              disabled={loading}
            >
              üìé –§–∞–π–ª
            </button>
            <input
              type="file"
              ref={fileInputRef}
              style={{ display: 'none' }}
              onChange={handleFileUpload}
            />
          </>
        )}
      </div>

      {!askMode && (
        <input
          type="text"
          placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ID"
          value={chunkId}
          onChange={(e) => setChunkId(e.target.value)}
          style={{
            marginTop: '0.5rem',
            width: '100%',
            padding: '0.5rem',
            borderRadius: '8px',
            border: '1px solid #ccc',
          }}
        />
      )}

      <div style={{ marginTop: '1rem' }}>
        <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
          <input
            type="checkbox"
            checked={askMode}
            onChange={() => setAskMode(!askMode)}
          />
          {askMode ? '–†–µ–∂–∏–º: –í–æ–ø—Ä–æ—Å' : '–†–µ–∂–∏–º: –ó–∞–≥—Ä—É–∑–∫–∞'}
        </label>
      </div>

      {error && <div className="error-message">{error}</div>}
    </div>
  );
};

export default RagGenerate;
